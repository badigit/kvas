#!/bin/sh
#------------------------------------------------------------------------------
#	ПАКЕТ КВАС
#------------------------------------------------------------------------------
#
#	Данный файл служит библиотекой переменных среды и функций,
#	которые используются в событийном пакете ndm
#	https://github.com/ndmsystems/packages/wiki/Opkg-Component
#
# ------------------------------------------------------------------------------
#	Разработчик: mail@zeleza.ru
#	Дата создания: 13/09/2022
#	Лицензия: Apache License 2.0
# ------------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------------
# Подключаем основные функции
. /opt/apps/kvas/bin/libs/main
# ------------------------------------------------------------------------------------------


ROUTE_TABLE_ID=1001
RULE_PRIORITY=1778
MARK_NUM=0xd1000
DNS_PORT=9753

IPSET_DESTINATION_EXCLUDED=KVAS_DESTINATION_EXCLUDED

CHAIN_DNS=KVAS_DNS
TABLE_DNS=nat

CHAIN_MARK=KVAS_MARK
TABLE_MARK=mangle

CHAIN_DNAT_TO_PORT=KVAS_DNAT_TO_PORT
TABLE_DNAT_TO_PORT=nat
#ToDo: переписать на https://github.com/shadowsocks/shadowsocks-libev?tab=readme-ov-file#transparent-proxy-pure-tproxy

IPv4='IPv4::'
IPv6='IPv6::'

ip4() (/opt/sbin/ip -4 "$@")
ip4tables() (/opt/sbin/iptables -C "$@" &>/dev/null || /opt/sbin/iptables -A "$@")
iptab() (/opt/sbin/iptables "$@")
ip4save() (/opt/sbin/iptables-save | grep -vE '\-A _')
get_gw4()([ "${1}" ] && /opt/sbin/ip addr show "${1}" | grep -Po "(?<=inet ).*(?=/)")
is_os_4()([[ "$(version_os)" =~ 4.* ]])

get_model() {
	if [ -n "${1}" ]; then
		local version_data="${1}"
	else
		local version_data=$(ndmc -c show version)
	fi

	echo "${version_data}" | grep -F 'model' | head -1 | cut -d: -f2 | xargs
}

get_version() {
	if [ -n "${1}" ]; then
		local version_data="${1}"
	else
		local version_data=$(ndmc -c show version)
	fi

	echo "${version_data}" | grep -F 'version' | grep -oE '[0-9][0-9\.]*[0-9]' | head -1
}

version_os() {
	local versions_data=$(ndmc -c show version)

	# пробуем использовать version только в блоке с ndw4
	local version_ndw4=$(echo "${versions_data}" | grep -zoP '(?s)ndw4:.+?\n\n')
	if [ -n "${version_ndw4}" ]; then
		version_ndw4=$(get_version "${version_ndw4}")
		if [ -n "${version_ndw4}" ]; then
			echo "${version_ndw4}"
			return
		fi
	fi

	# иначе любой
	echo $(get_version "${versions_data}")
}


#как пример гостевая сеть br3, которой необходимо обеспечить доступ к VPN
inface_cli()(get_config_value "INFACE_CLI")
inface_ent()(get_config_value "INFACE_ENT")
inface_gw4()(get_gw4 "$(inface_ent)")

inface_guest_gw4()(get_gw4 "${1}")
guest_net()(echo "$(inface_guest_gw4 "${1}" | cut -d'.' -f1-3).0/24")

# ------------------------------------------------------------------------------------------
# проверка на доступность программного и аппаратного ускорения
# ------------------------------------------------------------------------------------------
fastnet_support()(curl -s localhost:79/rci/show/version | grep -q ppe)
fast_hw_enabled()(is_os_4 && ask=enable || ask=false; ! curl -s localhost:79/rci/show/rc/ppe | grep hardware -C1 | grep -q ${ask})
fast_sw_enabled()(is_os_4 && ask=enable || ask=false; ! curl -s localhost:79/rci/show/rc/ppe | grep software -C1 | grep -q ${ask})
fastnet_enabled()(fast_hw_enabled || fast_sw_enabled)


# ------------------------------------------------------------------------------------------
#
# Функции для работы с iptables универсальные, подходящие и для IPv6
#
# ------------------------------------------------------------------------------------------

iptables__get_subrule_for_net() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — сетевой интерфейс"
		return
	fi
	local net_interface="${1}"

	if [ "${net_interface}" != 'ikev2' ] ; then
		echo "-i ${net_interface}"
		return
	fi

	net_interface=$(get_entware_ikev2_inface)
	local subrule="-i ${net_interface}"

	# если свой виртуальный интерфейс
	if echo "${net_interface}" | grep -Fq 'xfrms' ; then
		echo "${subrule}"
		return
	fi

	echo "-s $(get_ikev2_net_pool) ${subrule}"
}

ip4__get_subrule_for_ip() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — IP или маска подсети"
		return
	fi
	local ip_or_range="${1}"

	if echo "${ip_or_range}" | grep -qE "^${IP_FILTER}$" ; then
		ip_or_range="${ip_or_range}/32"
	fi

	echo "-s ${ip_or_range}"
}

# удаляет правило, полученное из iptables-save
iptables__delete_rule() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — правило"
		return
	fi
	local rule="${2}"

	if [ "${rule:0:3}" != '-A ' ]; then
		return
	fi

	iptables -t "${table}" -D $(echo "${rule:3}")
}

# удаляет правила, получаемые по критерию
iptables__delete_rules() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — фильтр"
		return
	fi
	local filter="${2}"

	local rules=$(iptables-save -t "${table}" | grep -F -- "${filter}")
	if [ -z "${rules}" ] ; then
		return
	fi

	log_warning "Удаление iptables правил в ${table} по критерию ${filter}"

	echo "${rules}" | while IFS= read -r rule ; do
		iptables__delete_rule "${table}" "${rule}"
	done
}


# ------------------------------------------------------------------------------------------
#
# Функции для работы с IPSet
# Пока что все помечены как ip4, по мере адаптации префикс удалять
#
# ------------------------------------------------------------------------------------------

ip4__ipset__is_exist() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — имя"
		return
	fi
	local ipset_name="${1}"

	! ipset list "${ipset_name}" 2>&1 | grep -q 'name does not exist'
}

ip4__ipset__create() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — имя"
		return
	fi
	local ipset_name="${1}"

	if ip4__ipset__is_exist "${ipset_name}"; then
		return
	fi

	if [ -n "${2}" ] ; then
		local ttl="${2}"

		local subcomand=" timeout ${ttl}"
		local submessage=" с таймаутом ${ttl}"
	else
		local subcomand=''
		local submessage=''
	fi

	log_warning "Cоздание набора IP ${ipset_name}${submessage}"

	ipset create "${ipset_name}" hash:net family inet -exist$(echo "${subcomand}") \
	 || {
		error "[${FUNCNAME}] Ошибка при создании набора IP ${ipset_name}${submessage}"
	}
}

# Для списка условной маршрутизации
ip4__ipset__create_list() {
	ip4__ipset__create "${IPSET_TABLE_NAME}" "$(get_config_value LIST_IPSET_TTL)"
}

#ToDo: сменить в других файлах обращение на новую обёртку
ip4set_create_table() {
	ip4__ipset__create_list
}

# Для постоянного списка исключаемых сетей
ip4__ipset__fill_destination_excluded() {
	if ip4__ipset__is_exist "${IPSET_DESTINATION_EXCLUDED}"; then
		return
	fi

	ip4__ipset__create "${IPSET_DESTINATION_EXCLUDED}"

	# Служебный IP Keenetic, например для my.keenetic.net
	ipset -exist add "${IPSET_DESTINATION_EXCLUDED}" '78.47.125.180'

	# Был случай, когда ресурс из списка совпадал с IP роутера
	# Это приводило к не рабочему DDNS и прочим проблемам
	ipset -exist add "${IPSET_DESTINATION_EXCLUDED}" "$(get_external_ip)"

	# Исключаем (loopback) адреса тоннеля из попадания в тоннель
	# Случай тоже детектирован и чуть более разрушителен
	for ip in $(get_tunnel_ip) ; do
		ipset -exist add "${IPSET_DESTINATION_EXCLUDED}" "${ip}"
	done

	while read -r ip_or_range || [ -n "${ip_or_range}" ]; do
		# пропускаем строки с комментариями
		[ "${ip_or_range:0:1}" = '#' ] && continue
		# удаляем из строк комментарии - все что встречается после символа # и сам символ
		# удаляем пробелы
		ip_or_range=$(echo "${ip_or_range}" | sed 's/#.*$//g' | tr -s ' ' )

		ipset -exist add "${IPSET_DESTINATION_EXCLUDED}" "${ip_or_range}"
	done < "${FILE_RESERVED}"
}

ip4__ipset__destroy() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — имя"
		return
	fi
	local ipset_name="${1}"

	if ! ip4__ipset__is_exist "${ipset_name}"; then
		return
	fi

	log_warning "Уничтожение набора IP ${ipset_name}"

	#ipset flush "${ipset_name}"
	ipset destroy "${ipset_name}" \
	 || {
		error "[${FUNCNAME}] Ошибка при уничтожении набора IP ${ipset_name}"
	}
}

# Для списка условной маршрутизации
ip4__ipset__destroy_list() {
	ip4__ipset__destroy "${IPSET_TABLE_NAME}"
}

# Для постоянного списка исключаемых сетей
ip4__ipset__destroy_destination_excluded() {
	ip4__ipset__destroy "${IPSET_DESTINATION_EXCLUDED}"
}


# ------------------------------------------------------------------------------------------
#
# Общие обёртки для цепочек
#
# ------------------------------------------------------------------------------------------

ip4__chain__is_exist() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	iptables-save -t "${table}" | grep -Fq "${chain_name}"
}

ip4__chain__exclude_source_by_config() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	local values=$(get_config_value 'route_excluded_ip')
	if [ -z "${values}" ] ; then
		return
	fi
	local regexp_ip_or_range=$(get_regexp_ip_or_range)

	for ip_or_range in ${values//+/ } ; do
		# защита от дурака; не обязательна, если проверять входящие данные
		if ! echo "${ip_or_range}" | grep -qE -- "${regexp_ip_or_range}" ; then
			continue
		fi

		log_warning "Исключение ${ip_or_range} из ${chain_name}"

		iptables -A "${chain_name}" -w -t "${table}" -s "${ip_or_range}" -j RETURN
	done
}

# Создаёт (если нет) цепочку для роутинга данных
ip4__chain__create_for_data() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	if ip4__chain__is_exist "${table}" "${chain_name}" ; then
		return
	fi

	log_warning "Создание цепочки ${chain_name} в ${table} для перенаправления данных"

	iptables -N "${chain_name}" -w -t "${table}"

	ip4__chain__exclude_source_by_config "${table}" "${chain_name}"

	ip4__ipset__fill_destination_excluded
	iptables -A "${chain_name}" -w -t "${table}" -m set --match-set "${IPSET_DESTINATION_EXCLUDED}" dst -j RETURN

	# если цепочка данных будет подключена выше DNS, то она может 
	# перехватить направленный вовне трафик
	for protocol in udp tcp ; do
		iptables -A "${chain_name}" -w -t "${table}" -p "${protocol}" --dport 53 -j RETURN
	done
}

ip4__chain__delete() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	if ! ip4__chain__is_exist "${table}" "${chain_name}"; then
		return
	fi

	log_warning "Удаление цепочки ${chain_name} в ${table}"

	iptables -F "${chain_name}" -t "${table}"
	iptables -X "${chain_name}" -t "${table}"
}

# удаляем входы в цепочку
ip4__chain__delete_jump() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	iptables__delete_rules "${table}" "-j ${chain_name}"
}


# ------------------------------------------------------------------------------------------
#
# Создание цепочек
#
# ------------------------------------------------------------------------------------------

ip4__proxy__create_chain() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	if [ -z "${3}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — порт"
		return
	fi
	local port="${3}"

	{
		if ip4__chain__is_exist "${table}" "${chain_name}" ; then
			return
		fi

		ip4__chain__create_for_data "${table}" "${chain_name}"

		for protocol in udp tcp ; do
			# не будет ли задвоения без -w?
			iptables -A "${chain_name}" -t "${table}" -p "${protocol}" -j REDIRECT --to-port "${port}"
		done
	} &>/dev/null || error "[${FUNCNAME}] Возникли ошибки при установке правил трафика для прокси"
}

ip4__shadowsocks__create_chain() {
	local local_port=$(get_config_value SSR_DNS_PORT)

	ip4__proxy__create_chain "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}" "${local_port}"
}

ip4__vless__create_chain() {
	local local_port=$(get_from_json "${VLESS_CONFIG_FILE}" 'port' 'inbounds')

	ip4__proxy__create_chain "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}" "${local_port}"
}

# когда ускорение подключено
ip4__vpn_fast__create_chain() {
	{
		if ip4__chain__is_exist "${TABLE_MARK}" "${CHAIN_MARK}" ; then
			return
		fi

		ip4__chain__create_for_data "${TABLE_MARK}" "${CHAIN_MARK}"

		# т.к. мы начнём маркировать трафик, то заранее
		# стартанём таблицы для него и повесим правило захвата
		ip4__route__add_table
		ip4__rule__add_mark_to_table

		iptables -A "${CHAIN_MARK}" -w -t "${TABLE_MARK}" -j CONNMARK --restore-mark
		iptables -A "${CHAIN_MARK}" -w -t "${TABLE_MARK}" -m mark --mark ${MARK_NUM} -j RETURN
		iptables -A "${CHAIN_MARK}" -w -t "${TABLE_MARK}" --syn -j MARK --set-mark ${MARK_NUM}
		iptables -A "${CHAIN_MARK}" -w -t "${TABLE_MARK}" -m conntrack --ctstate NEW -j MARK --set-mark ${MARK_NUM}
		iptables -A "${CHAIN_MARK}" -w -t "${TABLE_MARK}" -j CONNMARK --save-mark
	} &>/dev/null || error "[${FUNCNAME}] Возникли ошибки во время маркировки трафика для VPN при включенном ускорении"
}

# когда программное и аппаратное ускорение отключено
ip4__vpn_nofast__set_rules() {
	{
		#ToDo: должны работать таблицы или переписать на цепочки
		log_warning 'Маркировка трафика для VPN при отключенном ускорении'

		# правило не переписывалось, таким и было
		ip4tables PREROUTING -t "${TABLE_MARK}" -i "$(inface_ent)" -m set --match-set ${IPSET_TABLE_NAME} dst -j MARK --set-mark ${MARK_NUM}
	} &>/dev/null || error "[${FUNCNAME}] Возникли ошибки во время маркировки трафика для VPN при отключенном ускорении"
}


# ------------------------------------------------------------------------------------------
#
# Подключение домашней сети сделано отдельно
# В идеале должна быть отключаема, как гостевые
#
# ------------------------------------------------------------------------------------------

ip4__dns__delete_routing_for_home() {
	ip4__dns__delete_routing "-i $(get_local_inface)"
}

ip4__dns__add_routing_for_home() {
	# после включения редиректа DNS ipset начнёт заполняться
	# нужно его создать автоматически для DNSMasq, если ещё нет
	ip4__ipset__create_list

	ip4__dns__add_routing "-i $(get_local_inface)"
}

ip4__add_routing_for_home() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	#ToDo: использовать обёртку, а не код дальше

	local net_interface=$(get_local_inface)

	if iptables-save | grep -F 'PREROUTING' | grep -F "${net_interface}" | grep -F "${IPSET_TABLE_NAME}" | grep -Fq "${chain_name}" ; then
		return
	fi

	log_warning "Подключение перенаправления трафика для домашней сети в тоннель ${3}"

	iptables -A PREROUTING -w -t "${table}" -i "${net_interface}" -m set --match-set "${IPSET_TABLE_NAME}" dst -j "${chain_name}"
}

ip4__shadowsocks__add_routing_for_home() {
	ip4__add_routing_for_home "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}" 'ShadowSocks'
}

ip4__vless__add_routing_for_home() {
	ip4__add_routing_for_home "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}" 'VLESS'
}

# когда ускорение подключено
ip4__vpn_fast__add_routing_for_home() {
	ip4__add_routing_for_home "${TABLE_MARK}" "${CHAIN_MARK}" 'VPN со включенным ускорением'
}


# ------------------------------------------------------------------------------------------
#
# Подключение и отключение перехвата DNS
#
# ------------------------------------------------------------------------------------------

# Создаёт (если нет) цепочку для DNS редиректа
ip4__dns__create_chain() {
	if iptables-save | grep -Fq "${CHAIN_DNS}"; then
		return
	fi

	log_warning 'Создание цепочки для DNS перенаправления'

	iptables -N "${CHAIN_DNS}" -w -t "${TABLE_DNS}"

	ip4__chain__exclude_source_by_config "${TABLE_DNS}" "${CHAIN_DNS}"

	for protocol in udp tcp ; do
		# не будет ли задвоения без -w?
		iptables -A "${CHAIN_DNS}" -t "${TABLE_DNS}" -p "${protocol}" --dport 53 -j DNAT --to-destination 127.0.0.1:"${DNS_PORT}"
	done
}

# Возвращает номер (в nat PREROUTING) по куску правила
#Example input param: NDM_UPNP_REDIRECT_SYS
ip4__get_rulenum() {
	if [ -z "${1}" ]; then
		error "[${FUNCNAME}] Не передан обязательный параметр — правило для поиска"
		return
	fi
	local find="${1}"

	# если потребуются другие таблицы или цепочки, можно сделать их входящими параметрами
	local table='nat'
	local chain='PREROUTING'

	echo $(iptables-save -t "${table}" | grep -F "${chain}" | grep -vF :"${chain}" \
	 | grep -nF -- "${find}" | head -n 1 | grep -oE '^[0-9]+')
}

# Возвращает номер (в PREROUTING) для DNS-правил
ip4__dns__get_rulenum() {
	# вместо NDM_DNS_REDIRECT
	local rulenum=$(ip4__get_rulenum 'NDM_DNS_REDIRECT')
	if [ -n "${rulenum}" ]; then
		echo "${rulenum}"
		return
	fi

	# после NDM_DNAT
	rulenum=$(ip4__get_rulenum 'NDM_DNAT')
	if [ -n "${rulenum}" ]; then
		echo $((rulenum + 1))
		return
	fi

	# высший приоритет
	# если DNS перехват не будет работать, удаляем вышестоящее
	echo '1'
}

# Перенаправляем dns-запросы в dnsmasq
#Example input param:-s 192.168.3.0/24 -i eth3
#Example input param:-i sstp+
ip4__dns__add_routing() {
	if [ -n "${1}" ]; then
		local iptables_filter=$(echo "${1}" | xargs)
		local submessage=" по критерию ${iptables_filter}"
		iptables_filter=" ${iptables_filter}"
	else
		local iptables_filter=''
		local submessage=''
	fi

	if iptables-save | grep -F 'PREROUTING' | grep -F -- "${iptables_filter}" | grep -Fq "${CHAIN_DNS}" ; then
		return
	fi
	local rulenum=$(ip4__dns__get_rulenum)

	log_warning "Подключение DNS перенаправления с приоритетом ${rulenum}${submessage}"

	ip4__dns__create_chain
	# без echo дублирование пробелов (что даёт warning и проблему наличия)
	iptables -I PREROUTING "${rulenum}" -w -t "${TABLE_DNS}"$(echo "${iptables_filter}") -j "${CHAIN_DNS}"
}

# Отключение перехвата dns-запросов в dnsmasq
#Example input param:-s 192.168.3.0/24 -i eth3
#Example input param:-i sstp+
ip4__dns__delete_routing() {
	if [ -n "${1}" ]; then
		local iptables_filter=$(echo "${1}" | xargs)
		local submessage=" по критерию ${iptables_filter}"
		iptables_filter=" ${iptables_filter}"
	else
		local iptables_filter=''
		local submessage=''
	fi

	if ! iptables-save | grep -F 'PREROUTING' | grep -F -- "${iptables_filter}" | grep -Fq "${CHAIN_DNS}" ; then
		return
	fi

	log_warning "Отключение DNS перенаправления${submessage}"

	# без echo дублирование пробелов (что даёт warning и проблему наличия)
	iptables -D PREROUTING -t "${TABLE_DNS}"$(echo "${iptables_filter}") -j "${CHAIN_DNS}"
}


# ------------------------------------------------------------------------------------------
#
# Подключение и отключение других сетей
#
# ------------------------------------------------------------------------------------------

get_guest_net() {
	# ip addr show "${1}" | grep global | sed 's/^.*inet \(.*\).*/\1/' | cut -d' ' -f1
	/opt/sbin/ip addr show "${1}" | grep global | sed 's|^.*inet \([0-9\.\/]*\).*|\1|' | sed 's|[0-9]*\/|0\/|'
}

# Получение маски локальной подсети клиентов IKEv2
#Example: 192.168.3.0/24
get_ikev2_net_pool() {
	local ikev2_settings=$(curl -s "${LOCALHOST_IP}:79/rci/crypto/virtual-ip-server-ikev2")
	local pool_start=$(echo "${ikev2_settings}" | grep pool-start | cut -d':' -f2 | sed 's/[\,\" ]//g;')
	echo "${pool_start}" | sed 's/\.[0-9]\{1,3\}$/.0\/24/'
}

ip4__add_routing() {
	if [ -z "${3}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — критерий"
		return
	fi
	local iptables_filter="${3}"
	local submessage=" критерию ${iptables_filter}"

	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	# необязательный параметр — ipset для фильтра по целевым IP
	if [ -n "${4}" ] ; then
		local ipset_list="${4}"

		# т.к. используется DNS'ом и в правиле, то лучше бы проверить наличие
		ip4__ipset__create "${ipset_list}" "$(get_config_value LIST_IPSET_TTL)"

		# перехват DNS нужен только при фильтрации по IPSet
		ip4__dns__add_routing "${iptables_filter}"

		iptables_filter="${iptables_filter} -m set --match-set ${ipset_list} dst"
		submessage=" ipset ${ipset_list} и${submessage}"
	fi

	if iptables-save | grep -F 'PREROUTING' | grep -F -- "${iptables_filter}" | grep -Fq "${chain_name}" ; then
		return
	fi

	log_warning "Подключение перехвата трафика по${submessage}"

	iptables -A PREROUTING -w -t "${table}" $(echo "${iptables_filter}") -j "${chain_name}"
}

ip4__add_routing_by_list_for_net() {
	local net_interface="${1}"
	if [ -z "${net_interface}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — имя интерфейса"
		exit 1
	fi

	local iptables_filter=$(iptables__get_subrule_for_net "${net_interface}")

	if is_proxy_enabled ; then
		ip4__add_routing "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}" "${iptables_filter}" "${IPSET_TABLE_NAME}"
	elif fastnet_enabled ; then
		ip4__add_routing "${TABLE_MARK}" "${CHAIN_MARK}" "${iptables_filter}" "${IPSET_TABLE_NAME}"
	else
		ip4__dns__add_routing "${iptables_filter}"

		# на выходе не доступен i
		if [ "${net_interface}" = 'ikev2' ] ; then
			local net_pool=$(get_ikev2_net_pool)
		else
			local net_pool=$(get_guest_net "${net_interface}")
		fi
		net_interface=$(get_external_interface)

		# случай основного VPN и отключенного ускорения требует дополнительной проверки
		# но именно таким код был изначально, т.е. он точно не "ухудшится"
		if iptables-save | grep -F 'POSTROUTING' | grep -F "${net_pool}" | grep -F "${net_interface}" | grep -Fq 'MASQUERADE' ; then
			return
		fi
		log_warning "Подключение правил гостевого трафика для VPN без ускорения по критерию ${iptables_filter}"

		iptables -A POSTROUTING -w -t nat -s "${net_pool}" -o "${net_interface}" -j MASQUERADE
	fi
}

ip4__delete_routing() {
	if [ -z "${3}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — критерий"
		return
	fi
	local iptables_filter="${3}"
	local submessage=" критерию ${iptables_filter}"

	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — таблица"
		return
	fi
	local table="${1}"

	if [ -z "${2}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — цепочка"
		return
	fi
	local chain_name="${2}"

	# необязательный параметр — ipset для фильтра по целевым IP
	if [ -n "${4}" ] ; then
		local ipset_list="${4}"

		# перехват DNS нужен только при фильтрации по IPSet
		ip4__dns__delete_routing "${iptables_filter}"

		iptables_filter="${iptables_filter} -m set --match-set ${ipset_list} dst"
		submessage=" ipset ${ipset_list} и${submessage}"
	fi

	if ! iptables-save | grep -F 'PREROUTING' | grep -F -- "${iptables_filter}" | grep -Fq "${chain_name}" ; then
		return
	fi

	log_warning "Отключение перехвата трафика по${submessage}"

	iptables -D PREROUTING -t "${table}" $(echo "${iptables_filter}") -j "${chain_name}"
}

ip4__delete_routing_by_list_for_net() {
	local net_interface="${1}"
	if [ -z "${net_interface}" ] ; then
		error "[${FUNCNAME}] Отсутствует обязательный параметр — имя сетевого интерфейса"
		exit 1
	fi

	local iptables_filter=$(iptables__get_subrule_for_net "${net_interface}")

	ip4__dns__delete_routing "${iptables_filter}"

	if is_proxy_enabled ; then
		ip4__delete_routing "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}" "${iptables_filter}" "${IPSET_TABLE_NAME}"
	elif fastnet_enabled ; then
		ip4__delete_routing "${TABLE_MARK}" "${CHAIN_MARK}" "${iptables_filter}" "${IPSET_TABLE_NAME}"
	else
		ip4__dns__delete_routing "${iptables_filter}"

		# на выходе не доступен i
		if [ "${net_interface}" = 'ikev2' ] ; then
			local net_pool=$(get_ikev2_net_pool)
		else
			local net_pool=$(get_guest_net "${net_interface}")
		fi
		net_interface=$(get_external_interface)

		# случай основного VPN и отключенного ускорения требует дополнительной проверки
		# но именно таким код был изначально, т.е. он точно не "ухудшится"
		if ! iptables-save | grep -F 'POSTROUTING' | grep -F "${net_pool}" | grep -F "${net_interface}" | grep -Fq 'MASQUERADE' ; then
			return
		fi
		log_warning "Отключение правил гостевого трафика для VPN без ускорения по критерию ${iptables_filter}"

		iptables -D POSTROUTING -t nat -s "${net_pool}" -o "${net_interface}" -j MASQUERADE
	fi
}


# ------------------------------------------------------------------------------------------
#
# Общие обёртки, добавляющие правила iptables
#
# ------------------------------------------------------------------------------------------

# Для команды route by_list net add — роутинг по списку для сетей
ip4__add_routing_by_list_for_net_from_config() {
	for net_interface in $(get_guest_inface_list_from_config) ; do
		ip4__add_routing_by_list_for_net "${net_interface}"
	done
}

# Расширенный роутинг для перехватов цепочками. Для команд:
# route by_list ip add — роутинг по списку для IP
# route full ip add — роутинг всего трафика для IP
ip4__add_routing_for_ip_from_config() {
	local regexp_ip_or_range=$(get_regexp_ip_or_range)

	local values=$(get_config_value 'route_full_ip')
	if [ -n "${values}" ] ; then
		for ip_or_range in ${values//+/ } ; do
			# защита от дурака; не обязательна, если проверять входящие данные
			if ! echo "${ip_or_range}" | grep -qE -- "${regexp_ip_or_range}" ; then
				continue
			fi

			ip_or_range=$(ip4__get_subrule_for_ip "${ip_or_range}")
			if is_proxy_enabled ; then
				ip4__add_routing "${TABLE_DNAT_TO_PORT}"  "${CHAIN_DNAT_TO_PORT}"  "${ip_or_range}"
			elif fastnet_enabled ; then
				ip4__add_routing "${TABLE_MARK}" "${CHAIN_MARK}" "${ip_or_range}"
			fi
		done
	fi

	values=$(get_config_value 'route_by_list_ip')
	if [ -n "${values}" ] ; then
		for ip_or_range in ${values//+/ } ; do
			# защита от дурака; не обязательна, если проверять входящие данные
			if ! echo "${ip_or_range}" | grep -qE -- "${regexp_ip_or_range}" ; then
				continue
			fi

			ip_or_range=$(ip4__get_subrule_for_ip "${ip_or_range}")
			if is_proxy_enabled ; then
				ip4__add_routing "${TABLE_DNAT_TO_PORT}"  "${CHAIN_DNAT_TO_PORT}"  "${ip_or_range}" "${IPSET_TABLE_NAME}"
			elif fastnet_enabled ; then
				ip4__add_routing "${TABLE_MARK}" "${CHAIN_MARK}" "${ip_or_range}" "${IPSET_TABLE_NAME}"
			fi
		done
	fi
}

ip4_mark_vpn_network() {
	{
		if fastnet_enabled ; then
			ip4__vpn_fast__create_chain
		else
			ip4__vpn_nofast__set_rules
		fi

		# Сначала правила по IP, затем по сетям.
		# Для отключенного ускорения первое не сделает ничего, пока 
		# оно не будет переписано на цепочки
		ip4__add_routing_for_ip_from_config
		ip4__add_routing_by_list_for_net_from_config
		if fastnet_enabled ; then
			#ToDo: сделать home отключаемой
			ip4__vpn_fast__add_routing_for_home
		fi
	} &>/dev/null
}

ip4_firewall_set_all_rules() {
	if is_shadowsocks_enabled ; then
		ip4__shadowsocks__create_chain &>/dev/null

		# Сначала правила по IP, затем по сетям
		ip4__add_routing_for_ip_from_config &> /dev/null
		#ToDo: сделать home отключаемой
		ip4__shadowsocks__add_routing_for_home &> /dev/null
		ip4__add_routing_by_list_for_net_from_config &> /dev/null
	elif is_vless_enabled ; then
		ip4__vless__create_chain &>/dev/null

		# Сначала правила по IP, затем по сетям
		ip4__add_routing_for_ip_from_config &> /dev/null
		#ToDo: сделать home отключаемой
		ip4__vless__add_routing_for_home &> /dev/null
		ip4__add_routing_by_list_for_net_from_config &> /dev/null
	else
		ip4_mark_vpn_network
	fi
}


# ------------------------------------------------------------------------------------------
#
# Общие обёртки, удаляющие правила iptables
#
# ------------------------------------------------------------------------------------------

# Для команды route by_list net del — роутинг по списку для сетей
ip4__delete_routing_by_list_for_net_from_config() {
	for net_interface in $(get_guest_inface_list_from_config) ; do
		ip4__delete_routing_by_list_for_net "${net_interface}"
	done
}

# Расширенный роутинг для перехватов цепочками. Для команд:
# route by_list ip del — роутинг по списку для IP
# route full ip del — роутинг всего трафика для IP
ip4__delete_routing_for_ip_from_config() {
	local regexp_ip_or_range=$(get_regexp_ip_or_range)

	local values=$(get_config_value 'route_full_ip')
	if [ -n "${values}" ] ; then
		for ip_or_range in ${values//+/ } ; do
			# защита от дурака; не обязательна, если проверять входящие данные
			if ! echo "${ip_or_range}" | grep -qE -- "${regexp_ip_or_range}" ; then
				continue
			fi

			ip_or_range=$(ip4__get_subrule_for_ip "${ip_or_range}")
			if is_proxy_enabled ; then
				ip4__delete_routing "${TABLE_DNAT_TO_PORT}"  "${CHAIN_DNAT_TO_PORT}"  "${ip_or_range}"
			elif fastnet_enabled ; then
				ip4__delete_routing "${TABLE_MARK}" "${CHAIN_MARK}" "${ip_or_range}"
			fi
		done
	fi

	values=$(get_config_value 'route_by_list_ip')
	if [ -n "${values}" ] ; then
		for ip_or_range in ${values//+/ } ; do
			# защита от дурака; не обязательна, если проверять входящие данные
			if ! echo "${ip_or_range}" | grep -qE -- "${regexp_ip_or_range}" ; then
				continue
			fi

			ip_or_range=$(ip4__get_subrule_for_ip "${ip_or_range}")
			if is_proxy_enabled ; then
				ip4__delete_routing "${TABLE_DNAT_TO_PORT}"  "${CHAIN_DNAT_TO_PORT}"  "${ip_or_range}" "${IPSET_TABLE_NAME}"
			elif fastnet_enabled ; then
				ip4__delete_routing "${TABLE_MARK}" "${CHAIN_MARK}" "${ip_or_range}" "${IPSET_TABLE_NAME}"
			fi
		done
	fi
}

# для VPN
ip4_firewall_flush_vpn_rules() {
	{
		ip4__delete_routing_by_list_for_net_from_config
		# Для отключенного ускорения не сделает ничего, пока 
		# оно не будет переписано на цепочки
		ip4__delete_routing_for_ip_from_config

		if fastnet_enabled ; then
			# достаточно удалять правила для br0, но на всякий случай
			ip4__chain__delete_jump "${TABLE_MARK}" "${CHAIN_MARK}"
			# в бета 9 перехваты DNS не очищались, да и они универсальны меж подключениями
			#ip4__chain__delete_jump "${TABLE_DNS}" "${CHAIN_DNS}"

			# Во время работы удалять цепочки бессмысленно, они константны и не влияют ни на что
			# Достаточно убрать входы туда, что сделано выше
			# По идее, нижеидущее нужно вызывать лишь при установке или удалении
			#ip4__chain__delete "${TABLE_MARK}" "${CHAIN_MARK}"
			#ip4__chain__delete "${TABLE_DNS}" "${CHAIN_DNS}"
		else
			# антиправила для ip4__vpn_nofast__set_rules
			iptables__delete_rules "${TABLE_MARK}" "-j MARK --set-mark ${MARK_NUM}"
		fi
	} &>/dev/null
}

# для прокси подключений: ShadowSocks, VLESS
ip4_firewall_flush_proxy() {
	{
		ip4__delete_routing_by_list_for_net_from_config
		ip4__delete_routing_for_ip_from_config

		# достаточно удалять правила для br0, но на всякий случай
		ip4__chain__delete_jump "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}"
		# в бета 9 перехваты DNS не очищались, да и они универсальны меж подключениями
		#ip4__chain__delete_jump "${TABLE_DNS}" "${CHAIN_DNS}"

		# Во время работы удалять цепочки бессмысленно, они константны и не влияют ни на что
		# Достаточно убрать входы туда, что сделано выше
		# По идее, нижеидущее нужно вызывать лишь при установке или удалении
		#ip4__chain__delete "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}"
		#ip4__chain__delete "${TABLE_DNS}" "${CHAIN_DNS}"
	} &>/dev/null
}

# Удаляем все маршрутизирующие правила iptables
ip4_firewall_flush_all_rules() {
	if is_proxy_enabled ; then
		ip4_firewall_flush_proxy
	else
		ip4_firewall_flush_vpn_rules
	fi
}

# может прибрать всё (с убиванием цепочек и наборов)
ip4__flush() {
	if [ -z "${1}" ] ; then
		local parts=' net ip jump chain table ipset '
	else
		local parts=" ${1} "
	fi

	if echo "${parts}" | grep -Fq ' net ' ; then
		ip4__delete_routing_by_list_for_net_from_config
	fi
	if echo "${parts}" | grep -Fq ' ip ' ; then
		# Для отключенного ускорения не сделает ничего, пока 
		# оно не будет переписано на цепочки
		ip4__delete_routing_for_ip_from_config
	fi

	if is_proxy_enabled ; then
		if echo "${parts}" | grep -Fq ' jump ' ; then
			ip4__chain__delete_jump "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}"
		fi
		if echo "${parts}" | grep -Fq ' chain ' ; then
			ip4__chain__delete_jump "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}"

			ip4__chain__delete      "${TABLE_DNAT_TO_PORT}" "${CHAIN_DNAT_TO_PORT}"
			ip4__ipset__destroy_destination_excluded
		fi
	elif fastnet_enabled ; then
		if echo "${parts}" | grep -Fq ' jump ' ; then
			ip4__chain__delete_jump "${TABLE_MARK}" "${CHAIN_MARK}"
		fi
		if echo "${parts}" | grep -Fq ' chain ' ; then
			ip4__chain__delete_jump "${TABLE_MARK}" "${CHAIN_MARK}"

			ip4__chain__delete      "${TABLE_MARK}" "${CHAIN_MARK}"
			ip4__ipset__destroy_destination_excluded
		fi

		if echo "${parts}" | grep -Fq ' table ' ; then
			ip4__rule__delete_mark_to_table
			ip4__route__flush_table
		fi
	else
		iptables__delete_rules "${TABLE_MARK}" "-j MARK --set-mark ${MARK_NUM}"
	fi

	if echo "${parts}" | grep -Fq ' jump ' ; then
		ip4__chain__delete_jump "${TABLE_DNS}" "${CHAIN_DNS}"
	fi
	if echo "${parts}" | grep -Fq ' chain ' ; then
		ip4__chain__delete_jump "${TABLE_DNS}" "${CHAIN_DNS}"

		ip4__chain__delete      "${TABLE_DNS}" "${CHAIN_DNS}"
	fi

	if echo "${parts}" | grep -Fq ' ipset ' ; then
		ip4__ipset__destroy_list
	fi
}


# ------------------------------------------------------------------------------------------
#
# Всё, касающееся ip route и ip rule
# Используется лишь для VPN
#
# ------------------------------------------------------------------------------------------

ip4__route__flush_cache() {
	log_warning 'Очистка кэша маршрутизации'

	ip route flush cache &>/dev/null
}

ip4__route__show_table() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — id таблицы"
		return
	fi
	local table_id="${1}"

	ip route show table "${table_id}"
}

ip4__route__is_exist_table() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — id таблицы"
		return
	fi
	local table_id="${1}"

	[ $(ip4__route__show_table "${table_id}" | head -c1 | wc -c) -gt 0 ]
}

ip4__route__add_table() {
	local net_interface=$(get_config_value 'INFACE_ENT')
	local is_need_flush=''

	local gateway_ip=$(get_config_value 'ADDR_MAN')
	if [ -n "${gateway_ip}" ] ; then
		local subroute=" via ${gateway_ip}"
		local submessage=" через ${gateway_ip}"
	else
		local subroute=''
		local submessage=''
	fi
	subroute="default${subroute} dev ${net_interface}"
	submessage="таблицы маршрутизации ${ROUTE_TABLE_ID} для ${net_interface}${submessage}"

	local route_show=$(ip4__route__show_table "${ROUTE_TABLE_ID}")
	if [ -n "${route_show}" ] && ! echo "${route_show}" | grep -Fq "${subroute}" ; then
		# таблица существует, но не содержит нужного роута
		log_warning "Очистка таблицы маршрутизации ${ROUTE_TABLE_ID} из-за отсутствия ${subroute}"
		ip route flush table "${ROUTE_TABLE_ID}" &>/dev/null

		is_need_flush='1'

		# чтобы передобавилось ниже
		route_show=$(ip4__route__show_table "${ROUTE_TABLE_ID}")
	fi

	if [ -z "${route_show}" ] ; then
		log_warning "Добавление ${submessage}"

		ip route add table "${ROUTE_TABLE_ID}" $(echo "${subroute}") \
		 || {
			error "[${FUNCNAME}] Ошибка при добавлении ${submessage}"
		}

		is_need_flush='2'
	fi

	# если не gateway, то нужны 2 роута
	if [ -z "${gateway_ip}" ] ; then
		gateway_ip=$(get_ip_by_inface "${net_interface}")
		if [ -z "${gateway_ip}" ] ; then
			error "[${FUNCNAME}] При добавлении в таблицу маршрутизации ${ROUTE_TABLE_ID} не удалось определить IP шлюза для ${net_interface}"
		else
			local gateway_net=$(get_net_by_ip "${gateway_ip}")
			subroute="${gateway_net} via ${gateway_ip}" # dev ${net_interface}
			submessage="в таблицу маршрутизации ${ROUTE_TABLE_ID} для ${gateway_net} через ${gateway_ip}"

			if ! echo "${route_show}" | grep -Fq "${subroute}" ; then
				log_warning "Добавление ${submessage}"

				ip route add $(echo "${subroute}") table "${ROUTE_TABLE_ID}" \
				 || {
					error "[${FUNCNAME}] Ошибка при добавлении ${submessage}"
				}

				is_need_flush='3'
			fi
		fi
	fi

	if [ -n "${is_need_flush}" ] ; then
		ip4__route__flush_cache
	fi
}

ip4__route__flush_table() {
	if ! ip4__route__is_exist_table "${ROUTE_TABLE_ID}" ; then
		return
	fi

	log_warning "Очистка таблицы маршрутизации ${ROUTE_TABLE_ID}"

	ip route flush table "${ROUTE_TABLE_ID}" \
	 || {
		error "[${FUNCNAME}] Ошибка при очистке таблицы маршрутизации ${ROUTE_TABLE_ID}"
	}

	ip4__route__flush_cache
}

#ToDo: сменить в других файлах обращение на новую обёртку
ip4_add_route_table() {
	ip4__route__add_table
}

#ToDo: сменить в других файлах обращение на новую обёртку
ip4_flush_all_tables() {
	ip4__route__flush_table
}

ip4__rule__get_sub() {
	echo "fwmark ${MARK_NUM}/${MARK_NUM} lookup ${ROUTE_TABLE_ID}"
}

ip4__rule__get_submessage() {
	echo "правила ${RULE_PRIORITY} отправки пакетов с меткой ${MARK_NUM} в таблицу ${ROUTE_TABLE_ID}"
}

ip4__rule__add_mark_to_table() {
	local subrule="$(ip4__rule__get_sub)"
	if ip rule show | grep -Fq "${subrule}" ; then
		return
	fi

	local submessage="$(ip4__rule__get_submessage)"
	log_warning "Добавление ${submessage}"

	ip rule add $(echo "${subrule}") priority "${RULE_PRIORITY}" \
	 || {
		error "[${FUNCNAME}] Ошибка при добавлении ${submessage}"
	}
}

ip4__rule__delete_mark_to_table() {
	local subrule="$(ip4__rule__get_sub)"
	if ! ip rule show | grep -Fq "${subrule}" ; then
		return
	fi

	local submessage="$(ip4__rule__get_submessage)"
	log_warning "Удаление ${submessage}"

	ip rule del $(echo "${subrule}") priority "${RULE_PRIORITY}" \
	 || {
		error "[${FUNCNAME}] Ошибка при удалении ${submessage}"
	}
}

#ToDo: сменить в других файлах обращение на новую обёртку
ip4_rule_set_priority() {
	ip4__rule__add_mark_to_table
}

#ToDo: сменить в других файлах обращение на новую обёртку
ip4_rule_del_priority() {
	ip4__rule__delete_mark_to_table
}


# ------------------------------------------------------------------------------------------
#
# 	Вызываются из файла vpn и зависимых от ndm_d
# 	Имеют человеческий вывод, не выглядят системщиной для этого файла
#
# ------------------------------------------------------------------------------------------

# Чистим и заполняем таблицу правил iptables для vpn подключений
cmd_vpn_iptable_reset() {
	if is_proxy_enabled ; then
		warning 'VPN соединение не активно!'
	else
		ready "Переустановка iptables для vpn завершена"
		{
			cmd_vpn_iptable_flush
			ip4_mark_vpn_network
		} &> /dev/null && when_ok "УСПЕШНО" || when_bad "C ОШИБКАМИ"
	fi
}

# Чистим таблицу правил iptables для vpn подключений
cmd_vpn_iptable_flush() {
	ready "Очистка iptables для vpn завершена"
	ip4_firewall_flush_vpn_rules && when_ok "УСПЕШНО" || when_bad "C ОШИБКАМИ"
}


# ------------------------------------------------------------------------------------------
#
# Функции для поддержки протокола ip6
#
# ------------------------------------------------------------------------------------------
ip6() (/opt/sbin/ip -6 "$@")
ip6tables() (if ! /opt/sbin/ip6tables -C "$@" &>/dev/null; then ip6tables -A "$@"; fi)
ip6save() (/opt/sbin/ip6tables-save)

ip6set_create_table(){
	local ttl_timeout=$(get_config_value LIST_IPSET_TTL)
	ipset create "${IPSET_TABLE_NAME}6" hash:net family inet6 -exist timeout ${ttl_timeout} &>/dev/null \
	 || {
			_err="${IPv6}Возникла ошибка при создании таблицы с именем '${IPSET_TABLE_NAME}' для ipset"
			error "[${FUNCNAME}] ${_err}"
		}
}
